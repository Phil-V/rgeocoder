# Based on the "trust" template v0.1.1
# https://github.com/japaric/trust/tree/v0.1.1
dist: trusty
language: rust
rust:
  - nightly
services: docker
sudo: required
# Config file for automatic testing at travis-ci.org
# This file will be regenerated if you run travis_pypi_setup.py

env:
  global:
    - CRATE_NAME: rgeocoder
    # Rust release. E.g. Stable, nightly, nightly-2014-12-18
    - RUSTRELEASE: nightly
    - RUSTCOMPILER: RUSTUP
    - TWINE_USERNAME: Phil-V
    - secure: KeeCV2aEV6O93nwKNIIqR5DNmZhhdc0KF8cN1Gy4HmYIHKMKHH6JvQPnK5WlOxlac9l2nc9i+BCtBB4aC/KcaVfDtmFCXerjqcmQxE6FCfTdOcd8p9RoTdHrBE2XHCr7n8c/9RL4+gLlzlVGjVXrYC0zUVVxvNmwu04iNoye7Cg/5SecUA6j7buK11zIMwRRu+q/2JtxMd/vlp20yMk6ZAq4DpG9c8lGFYVLByLS5wTu09SHY0lC1Bb4JLNbwow+PDBBhINatrLoBgHEksOcIwm9pt6oYUQwL5Y21BIF/oJlMiaWaPV0WJijsO2eYgzqC+qt5bdhpRp3uxY2sk3FzS+Bk0TxzJwlH16PNsC/nSjsOJefUPGQ/1O76qx97fVhmStVOevYxEVXMMNg3/7tZcpLdItfZD/zgz0UafbbroKnq1Xrle9pyjd0pK0uNeTFODDcVrst+HlsdAPQ41RwSuAYpGKTbHfcbyYIwLdptggxCO5itMXFQaParqe4p+6PURoXXPlC6KeAk3B7AAmlyPVNuL5Wt3FqGlabzLCsFV7RXak/QUMhEk4uaNNp043L20/v+CNKW2BTfNSgJZuabnRThLVBPzzTR5M4D36G/KOtuTrbeApHhclS3tncSf5ZLekGZ6Y0eEW9NhhZ/RiNEMYxk9+HsDDe/2vun6GQpEY=

matrix:
  include:
    # TARGET is the rust target triplet
    # WHEELPLATFORM - is the wheel platform target that is passed in as
    #                 python setup.py bdist_wheel --plat-name=<WHEELPLATFORM>
    #                 E.g. "macosx_10_11_x86_64", "win_amd64", "manylinux1_x86_64"
    #                 Using "manylinux1_i686" or "manylinux1_x86_64" will initiate a
    #                 special "manylinux build"


    # PYENV - single version, or comma seperated list of versions to build against
    #         Not relevent if using "manylinux" because python is already installed in
    #         the manylinux docker container and those are used instead

    # RUSTCOMPILER - which build tools do we intall for rust. options are RUSTUP or CROSS.
    #                This option is ignored when building a manylinux wheel
    #                Also, at this time you would have to integrate Cross yourself.


    # Linux
    # we are using Rustup instead of cross when WHEELPLATFORM="*manylinux*". This is because both
    # manylinux and Cross depend on Docker but the shared libs in the Cross contains are too new
    # to make valid manylinux containers.
    #
    # You can lean more about the differnt Rustup toolchains here:
    # https://github.com/rust-lang-nursery/rustup.rs#toolchain-specification
    #
    # More on manylinuyx at https://github.com/pypa/manylinux
    # and the pep https://www.python.org/dev/peps/pep-0513
    #
    # one other thing about manylinux. Since the container contains several versions of python,
    # we build/test against all of them at the same time. I have it set up to run against
    # cp27-cp27m, cp27-cp27mu, cp33-cp33m, cp34-cp34m, cp35-cp35m, cp36-cp36m
    # PYENV versions isn't relevent here so just keep it at 3.6.1
    - env: TARGET=i686-unknown-linux-gnu PYENV=3.6.5 WHEELPLATFORM=manylinux1_i686
    - env: TARGET=x86_64-unknown-linux-gnu PYENV=3.6.5 WHEELPLATFORM=manylinux1_x86_64

    #  Note that musl isn't covered by manylinux and I had trouble building
    #  dylibs with it as well
    # - env: TARGET=i686-unknown-linux-musl PYENV=2.7.13 WHEELPLATFORM=
    # - env: TARGET=i686-unknown-linux-musl PYENV=3.6.1 WHEELPLATFORM=
    # - env: TARGET=x86_64-unknown-linux-musl PYENV=2.7.13 WHEELPLATFORM=
    # - env: TARGET=x86_64-unknown-linux-musl PYENV=3.6.1 WHEELPLATFORM=

    # OSX
    # See versions https://docs.travis-ci.com/user/osx-ci-environment/#OS-X-Version
    # current default is osx_image: xcode7.3 OS X 10.11
    # xcode6.4 seems to segfault with rustup or cross
    # - env: TARGET=x86_64-apple-darwin PYENV='3.6.5,3.5.5,2.7.15' WHEELPLATFORM=macosx_10_11_x86_64
    #   os: osx
    #   osx_image: xcode7.3
    - env: TARGET=x86_64-apple-darwin PYENV='3.6.5,3.5.5,2.7.15' WHEELPLATFORM=macosx_10_12_x86_64
      os: osx
      osx_image: xcode8.3

before_install: set -e

install:
  - if [ $TRAVIS_OS_NAME = linux ]; then sudo apt-get install python-virtualenv python-pip; fi
  - bash ci/pyinstall.sh
  - bash ci/install.sh
  - source ~/.cargo/env || true

script:
  - bash ci/script.sh

deploy:
 - provider: script
   script: ci/pypi_upload.sh
   skip_cleanup: true
   on:
     tags: true

before_cache:
  # Travis can't cache files that are not readable by "others"
  - chmod -R a+r $HOME/.cache/pip
  - chmod -R a+r $HOME/.cache/pyenv
  - chmod -R a+r $HOME/.cargo
  - chmod -R a+r $HOME/.rustup
  - chmod -R a+r $HOME/.manylinux_pip_cache
  - chmod -R a+r $HOME/.manylinux_rustup_cache
  - chmod -R a+r $HOME/.manylinux_cargo_cache

cache:
  # There is a "cache: cargo" option but it's fails if target/ isn't in the build dir
  directories:
    - $HOME/.cache/pip
    - $HOME/.cache/pyenv
    - $HOME/.cargo
    - $HOME/.rustup
    - $HOME/.manylinux_pip_cache
    - $HOME/.manylinux_rustup_cache
    - $HOME/.manylinux_cargo_cache

branches:
  only:
    # release tags
    - /^v\d+\.\d+\.\d+.*$/
    - master

notifications:
  email:
    recipients:
      - philippe@arcadian.be
    on_success: never
    on_failure: never # default: always
